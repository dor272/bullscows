{"version":3,"sources":["thumbsup.png","Form.js","Guess.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Input","value","handleChange","props","ref","inputRef","onChange","e","target","length","NumberForm","numOfEntries","handleSubmit","validator","useState","Array","fill","values","setValues","firstInput","useRef","updateValue","i","console","log","test","copy","parseInt","alert","className","onSubmit","preventDefault","some","v","Number","isInteger","current","focus","sendForm","map","idx","key","type","Guess","res","feedback","repeat","bull","trim","cow","getRandomDigit","Math","floor","random","App","entries","setEntries","guesses","setGuesses","endOfPage","useEffect","setTimeout","scrollIntoView","behavior","jsx","randomizeEntries","amount","rand","includes","push","won","guessWithRes","forEach","g","arr","indexOf","checkGuess","guess","classes","onClick","gr","src","thumbsUp","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6e4d2d3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thumbsup.c4c673ec.png\";","import React, { useState, useRef } from 'react';\r\n\r\n\r\nfunction Input({ value, handleChange, inputRef}) {\r\n    let props = {\r\n        value,\r\n        ref: inputRef,\r\n        onChange: (e) => handleChange(e.target.value[e.target.value.length - 1]),\r\n    }\r\n    return <input {...props}/>\r\n}\r\n\r\n\r\nfunction NumberForm({ numOfEntries, handleSubmit, validator }) {\r\n    let [values, setValues] = useState([...Array(numOfEntries).fill('')])\r\n    const firstInput = useRef(null);\r\n\r\n    const updateValue = (i) => (value) => {\r\n        console.log(value)\r\n        if (value && !/^\\d*$/.test(value)) {\r\n            alert('only digits are allowed')\r\n            return;\r\n        }\r\n        let copy = [...values];\r\n        copy[i] = value ? parseInt(value) : '';\r\n        setValues(copy)\r\n    }\r\n\r\n    const sendForm = (e) => {\r\n        e.preventDefault();\r\n        console.log(values)\r\n        if (values.some(v => !Number.isInteger(v) || validator(v))) {\r\n            alert('you have to complete the form with valid values')\r\n            return;\r\n        }\r\n        handleSubmit(values)\r\n        setValues([...Array(numOfEntries).fill('')])\r\n        firstInput.current.focus()\r\n    }\r\n\r\n    return <div className='guess'>\r\n    <form className='values' onSubmit={(e) => sendForm(e)}>\r\n        {values.map((i, idx) => {\r\n            let props = {\r\n                key: idx,\r\n                value: values[idx],\r\n                handleChange: updateValue(idx),\r\n            }\r\n            if (!idx)\r\n                props.inputRef = firstInput;\r\n            return <Input {...props} />\r\n        }\r\n        )}\r\n        <input type=\"submit\" value=\"Submit\" />\r\n    </form>\r\n    </div>\r\n}\r\n\r\nexport default NumberForm;","import React from 'react';\r\n\r\n\r\n\r\nfunction Guess({values, res}){\r\n    let feedback = '';\r\n    if (res){\r\n        feedback += 'בול '.repeat(res.bull).trim()\r\n        feedback += '  פגיעה'.repeat(res.cow)\r\n    }\r\n    return <div className='guess'>\r\n    {res && <div className=\"feedback\">\r\n        {feedback}\r\n        </div>}\r\n    <div className='values'>\r\n        {values.map((v,i)=> <span key={i} >{v}</span>)}\r\n    </div>\r\n    </div>\r\n\r\n\r\n}\r\n\r\n\r\nexport default Guess;","import React, { useState, useEffect, useRef } from 'react';\nimport './App.css';\nimport NumberForm from './Form.js';\nimport Guess from './Guess.js';\nimport thumbsUp from './thumbsup.png';\n\nfunction App() {\n  let [entries, setEntries] = useState(/* 0 */[5,9,6]);\n  let [guesses, setGuesses] = useState([[5,6,0]])\n\n  const reset = () => {\n    setEntries(0);\n    setGuesses([])\n  }\n\n  let endOfPage = useRef(null);\n  useEffect(()=> {\n    setTimeout(() => {\n      endOfPage.current.scrollIntoView({behavior: \"smooth\"})\n    }, 350);\n  }, [guesses])\n\n /*  const checkValue = (value, idx) => {\n    if (value === entries[idx])\n        return 'bull'\n    if (entries.includes(value))\n    return 'cow'\n    return '';\n}  */\n\nconst checkGuess = (values) => {\n  let res = {bull: 0, cow: 0};\n  values.forEach((v,idx,arr) =>{\n    if (arr.indexOf(v) !== idx)\n      return;\n    if (v === entries[idx])\n      res.bull++;\n    else if (entries.includes(v))\n      res.cow++\n  })\n  return res;\n}\n\nconst randomizeEntries = (amount) => {\n  let entries = []\n  for (let i=0; i<amount; i++){\n    let rand = getRandomDigit();\n    while (entries.includes(rand)){\n      rand = getRandomDigit()\n    }\n    entries.push(rand);\n  }\n  return entries;\n}\n  let jsx;\n  if (!entries)\n    jsx = <div>\n      <h2>כמה מספרים להגריל?</h2>\n      <NumberForm\n        numOfEntries={1}\n        validator={(v) => v < 1 || v > 5}\n        handleSubmit={(...v) => setEntries(randomizeEntries(parseInt(v)))} />\n    </div>\n  else{\n    let won = false;\n    let guessWithRes = [];\n    guesses.forEach((g,i) => {\n      let res = checkGuess(g)\n      won = res.bull === entries.length;\n      guessWithRes.push({guess: g, res})\n    })\n    jsx=\n    <div>\n      <Guess values={entries.map(e => won ? e : '*')} classes={entries.map(e => '')}/>\n      <div><button onClick={reset}>reset</button></div>\n      {guessWithRes.map((gr, idx) => <Guess key={idx} values={gr.guess} res={gr.res} />)}\n      { !won ? <NumberForm\n        numOfEntries={entries.length}\n        validator={(v) => v < 0 || v > 9}\n        handleSubmit={(v) => setGuesses([...guesses, v])} />\n        : \n        <img className=\"thumbsup\" src={thumbsUp} alt=\"good job\"/>}\n      </div>\n  }\n  return <div>\n  {jsx}\n  <div ref={endOfPage} />\n  </div>;\n}\n\n\nfunction getRandomDigit(){\n  return Math.floor(Math.random() * 10);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}